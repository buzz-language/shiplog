import "std";
import "fs";
import "os";
import "sqlite";
import "errors";
import "serialize";
import "term";

export object Attribute {
    int? id,
    str name,
    str @"type",

    static fun createTables(Database db) > void !> SQLiteError {
        | FIXME: calling with resolve should free surrounding function to require yield type
        _ = resolve &(db.prepareRaw(`
            CREATE TABLE IF NOT EXISTS attributes (
                rowid INTEGER NOT NULL PRIMARY KEY,
                name TEXT NOT NULL UNIQUE,
                type TEXT NOT NULL
            )
        `)).execute();

        _ = resolve &(db.prepareRaw(`
            CREATE TABLE IF NOT EXISTS entries_attributes (
                entry_id INTEGER NOT NULL, 
                attribute_id INTEGER NOT NULL,
                value TEXT NOT NULL,
                FOREIGN KEY(entry_id) REFERENCES entries(rowid),
                FOREIGN KEY(attribute_id) REFERENCES attributes(rowid),
                PRIMARY KEY(entry_id, attribute_id)
            )
        `)).execute();
    }
}

export object Tag {
    int? id,
    str label,

    static fun fromBoxed([Boxed] propertyList) > Tag {
        return Tag{
            id = propertyList[0].integerValue(),
            label = propertyList[1].stringValue(),
        };
    }

    static fun createTables(Database db) > void !> SQLiteError {
        _ = resolve &(db.prepareRaw(`
            CREATE TABLE IF NOT EXISTS entries_tags (
                entry_id INTEGER NOT NULL, 
                tag TEXT NOT NULL,
                FOREIGN KEY(entry_id) REFERENCES entries(rowid),
                PRIMARY KEY(entry_id, tag)
            )
        `)).execute();
    }

    fun colored() > str {
        const float a = toFloat("a".byte());

        const float r = ((toFloat(this.label.lower().byte(0)) - a) / 26.0) * 255.0;
        const float g = ((toFloat(this.label.lower().byte(1)) - a) / 26.0) * 255.0;
        const float b = ((toFloat(this.label.lower().byte(2)) - a) / 26.0) * 255.0;

        return "+\27[38;2;{toInt(r)};{toInt(g)};{toInt(b)}m{this.label}\27[0m";
    }
}

export object Entry {
    int? id,
    str? createdAt,
    str? updatedAt,
    str content,
    str? location,
    [Tag] tags = [<Tag>],
    {str, str} attributes = {<str, str>},

    static fun fromBoxed([Boxed] propertyList) > Entry {
        return Entry{
            id = propertyList[0].integerValue(),
            createdAt = propertyList[1].stringValue(),
            updatedAt = propertyList[2].string(),
            content = propertyList[3].stringValue(),
            location = propertyList[4].string(),
        };
    }

    static fun createTables(Database db) > void !> SQLiteError {
        _ = resolve &(db.prepareRaw(`
            CREATE TABLE IF NOT EXISTS entries (
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                updated_at TIMESTAMP,
                content TEXT NOT NULL,
                location TEXT
            )
        `)).execute();
    }

    static fun parse(str args) > Entry? {
        [str] tags = [<str>];
        {str, str} attributes = {<str, str>};
        str content = "";

        foreach (str line in args.split("\n")) {
            foreach (str word in line.split(" ")) {
                str trimmed = word.trim();
                str prefix = trimmed[0];

                if (prefix == "+") {
                    tags.append(trimmed.sub(1));
                } else if ($"^([^=])+=([^\s]+)".match(trimmed) -> match) {
                    attributes[match[1]] = match[2];
                } else {
                    content = "{content}{word} ";
                }
            }

            content = content + "\n";
        }

        content = content.trim();

        return Entry{
            content = content,
            tags = tags.map::<Tag>(
                fun (int _, str tag) -> Tag{ label = tag }
            ),
            attributes = attributes,
        };
    }

    fun expr() > str {
        str expression = "";
        foreach (str key, str value in this.attributes) {
            expression = "{expression}{key}={value}\n";
        }

        foreach (Tag tag in this.tags) {
            expression = "{expression}+{tag.label}\n";
        }

        return "{expression}{this.content}";
    }
}

export object Filter {
    int? id,
    [str] tags = [<str>],
    [str] excludedTags = [<str>],
    {str, str} attributes = {<str, str>},
    {str, str} excludedAttributes = {<str, str>},
    str? content,
    str? before,
    str? after,
    str? at,
    int? limit,

    fun isEmpty() > bool {
        return this.tags.len() == 0
            and this.excludedTags.len() == 0
            and this.attributes.size() == 0
            and this.excludedTags.size() == 0
            and this.content == null;
    }

    static fun parse([str] args) > Filter {
        Filter filter = Filter{};

        foreach (str word in args) {
            str trimmed = word.trim();
            str prefix = trimmed[0];

            if (prefix == "+") {
                filter.tags.append(trimmed.sub(1));
            } else if (prefix == ":") {
                filter.excludedTags.append(trimmed.sub(1));
            } else if ($"^([^=])+=([^\s]+)".match(trimmed) -> match) {
                filter.attributes[match[1]] = match[2];
            } else {
                filter.content = "{filter.content}{word} ";
            }

            | TODO: excluded attributes
        }

        filter.content = filter.content?.trim();

        return filter;
    }
}

export object Journal {
    Database db,

    static fun init(SQLite sqlite, str? path) > Journal !> SQLiteError, FileSystemError, UnexpectedError {
        str dir = path ?? "{env("HOME")}/.shiplog";
        bool initialized = exists("{dir}/journal.db");

        if (!initialized) {
            try {
                makeDirectory(dir);
            } catch (FileSystemError err) {
                if (err != FileSystemError.PathAlreadyExists) {
                    throw err;
                }
            }
        }

        const Database db = sqlite.open(
            "{dir}/journal.db",
            flags: [OpenFlag.ReadWrite, OpenFlag.Create],
        );

        if (!initialized) {
            Entry.createTables(db);
            Tag.createTables(db);
            Attribute.createTables(db);
        }

        Journal journal = Journal{
            db = db,
        };

        return journal;
    }

    fun getEntry(int id) > Entry? !> SQLiteError {
        const [[Boxed]] result = resolve &Query{}
            .select([ "rowid", "created_at", "updated_at", "content", "location" ])
            .@"from"([ "entries" ])
            .where([ "rowid = {id}" ])
            .execute(this.db);
        
        if (result.len() == 0) {
            return null;
        }

        const Entry entry = Entry.fromBoxed(result[0]);

        Statement selectTags = Query{}
            .select([ "rowid", "tag" ])
            .@"from"([ "entries_tags " ])
            .where([ "entry_id = {entry.id}" ])
            .prepare(this.db);

        foreach ([Boxed] tagRow in &selectTags.execute()) {
            entry.tags.append(Tag.fromBoxed(tagRow));
        }

        return entry;
    }

    fun getEntries(Filter filter) > [Entry] > Entry? !> SQLiteError {
        [Entry] entries = [<Entry>];
        Query selectEntriesQuery = Query{}
            .select([ "rowid", "created_at", "updated_at", "content", "location" ])
            .@"from"([ "entries" ]);
        
        [str] conditions = [<str>];

        if (filter.content -> content) {
            conditions.append("content LIKE '%{content}%'");
        }

        if (filter.id -> id) {
            conditions.append("rowid = {id}");
        }

        if (filter.tags.len() > 0) {
            str tagFilter = filter.tags
                .map::<str>(fun (int _, str tag) -> "'{tag}'")
                .join(", ");
            conditions.append("rowid IN (SELECT entry_id FROM entries_tags WHERE tag IN ({tagFilter}))");
        }

        if (filter.excludedTags.len() > 0) {
            str tagFilter = filter.excludedTags
                .map::<str>(fun (int _, str tag) -> "'{tag}'")
                .join(", ");
            conditions.append("rowid NOT IN (SELECT entry_id FROM entries_tags WHERE tag IN ({tagFilter}))");
        }

        if (filter.before -> before) {
            conditions.append("date(created_at) < date('{before}')");
        }

        if (filter.after -> after) {
            conditions.append("date(created_at) > date('{after}')");
        }

        if (filter.at -> at) {
            conditions.append("date(created_at) = date('{at}')");
        }

        selectEntriesQuery = selectEntriesQuery
            .where(conditions);
        
        if (filter.limit -> limit) {
            selectEntriesQuery = selectEntriesQuery
                .limit(limit);
        }

        foreach ([Boxed] entryRow in &selectEntriesQuery.execute(this.db)) {
            const Entry entry = Entry.fromBoxed(entryRow);
            Statement selectTags = Query{}
                .select([ "rowid", "tag" ])
                .@"from"([ "entries_tags " ])
                .where([ "entry_id = {entry.id}" ])
                .prepare(this.db);

            foreach ([Boxed] tagRow in &selectTags.execute()) {
                entry.tags.append(Tag.fromBoxed(tagRow));
            }

            entries.append(entry);
            _ = yield entry;
        }

        return entries;
    }

    fun listEntries(Filter filter, bool short = false) > void !> SQLiteError {
        foreach (Entry entry in &this.getEntries(filter)) {
            str line = entry.content;
            if ($"([^\n]+)".match(entry.content) -> match) {
                line = match[1];
            }
            line = line.sub(0, len: 80);

            [str] tags = [<str>];
            foreach (Tag tag in entry.tags) {
                tags.append(tag.colored());
            }

            if (short) {
                print(
                    cyan("#{entry.id} ")
                    + green(line)
                    + " "
                    + tags.join(" ")
                );
            } else {
                print(
                    cyan("#{entry.id} ")
                    + green(line)
                    + "\n"
                    + dim(entry.updatedAt ?? entry.createdAt ?? "")
                    + " "
                    + tags.join(" ")
                );
            }
        }
    }

    fun addEntry(Entry entry) > void !> SQLiteError {
        _ = resolve &Query{}
            .insertInto("entries", columns: [ "content" ])
            .values([ "'{entry.content}'" ])
            .execute(this.db);
        
        entry.id = (resolve &Query{}
            .select([ "LAST_INSERT_ROWID()" ])
            .execute(this.db))[0][0]
            .integerValue();
        
        foreach (Tag tag in entry.tags) {
            _ = resolve &Query{}
                .insertInto("entries_tags", columns: [ "entry_id", "tag" ])
                .values([ "{entry.id}", "'{tag.label}'" ])
                .execute(this.db);
        }
    }

    fun modifyEntry(Filter filter) > void !> SQLiteError {
        if (filter.id == null) {
            return;
        }

        if (filter.content -> content) {
            _ = resolve &Query{}
                .update("entries")
                .set([ "content = '{content}'" ])
                .where([ "rowid = {filter.id}" ])
                .execute(this.db);
        }

        foreach (str tag in filter.tags) {
            _ = resolve &Query{}
                .replaceInto("entries_tags", columns: [ "entry_id", "tags" ])
                .values([ "{filter.id}", "'{tag}'" ])
                .where([ "entry_id = {filter.id}" ])
                .execute(this.db);
        }

        if (filter.excludedTags.len() > 0) {
            str tags = filter.excludedTags.map::<str>(
                fun (int _, str tag) -> "'{tag}'",
            ).join(", ");

            _ = resolve &Query{}
                .deleteFrom("entries_tags")
                .where([ "entry_id = {filter.id}", "tag IN ({tags})" ])
                .execute(this.db);
        }

        | TODO: attributes
    }

    fun deleteEntry(int id) > void !> SQLiteError {
        _ = resolve &Query{}
            .deleteFrom("entries")
            .where([ "rowid = {id}" ])
            .execute(this.db);
        
        _ = resolve &Query{}
            .deleteFrom("entries_tags")
            .where([ "entry_id = {id}" ])
            .execute(this.db);
    }
}