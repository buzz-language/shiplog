import "std";
import "args";
import "journal";
import "sqlite";
import "errors";
import "io";
import "os";
import "log";

fun getEntrySource(Command command) > str? !> FileSystemError, ReadWriteError, UnexpectedError {
    if (command.options["file"]?.value -> file) {
        return File.open(file, mode: FileMode.read).readAll();
    }

    if (command.arguments["entry"]?.value -> entry) {
        if (entry.len() > 0) {
            return entry.join(" ");
        }
    }

    if (!stdin.isTTY()) {
        return stdin.readAll();
    }

    const str tmpFile = tmpFilename("shiplog");

    | TODO: overwrite existing entry when id provided

    if (execute([env("EDITOR") ?? "vi", tmpFile]) == 0) {
        return File.open(tmpFile, mode: FileMode.read).readAll();
    }

    return null;
}

fun main([str] args) > void {
    Logger.instance = Logger{
        out = stderr,
        level = Level.Debug,
    };

    Command command = Command{
        name = "shiplog",
        desc = "âš“ A journal keeping cli tool",
        options = {
            "help": Option{
                name = "help",
                desc = "Show this help message",
                aliases = [ "h" ],
            },
            "directory": Option{
                name = "directory",
                desc = "Specify where shiplog will leave (default is ~/.shiplog)",
                aliases = [ "dir", "d" ],
            },
        },
        commands = {
            "add": Command{
                name = "add",
                desc = "Write a log entry",
                options = {
                    "file": Option{
                        name = "file",
                        desc = "Use file content as entry",
                        aliases = [ "f" ],
                    },
                },
                arguments = {
                    "entry": Argument{
                        name = "entry",
                        desc = "The entry. Any word prefixed by `+` will be added as a tag. If omitted will be read from stdin",
                        min = 0,
                        max = null,
                    },
                },
            },
            "list": Command{
                name = "list",
                desc = "List log entries",
                arguments = {
                    "filter": Argument{
                        name = "filter",
                        desc = "Filter entries. You can filter in or out tags by prefixing the tag name by `+` or `:` respectively.",
                        min = 0,
                        max = null,
                    }
                },
                options = {
                    "limit": Option{
                        name = "limit",
                        desc = "Limit number of printed entries",
                        aliases = [ "n" ],
                        hasValue = true,
                    },
                    "before": Option{
                        name = "before",
                        desc = "Only show entry created before this date",
                        aliases = [ "b" ],
                        hasValue = true,
                    },
                    "after": Option{
                        name = "after",
                        desc = "Only show entry created after this date",
                        aliases = [ "a" ],
                        hasValue = true,
                    },
                    "at": Option{
                        name = "at",
                        desc = "Only show entry created at this date",
                        hasValue = true,
                    },
                    "short": Option{
                        name = "short",
                        desc = "Short list with only titles and IDs",
                        aliases = [ "s" ],
                    }
                }
            },
            "delete": Command {
                name = "delete",
                desc = "Delete entry",
                aliases = [ "del", "d" ],
                arguments = {
                    "id": Argument{
                        name = "id",
                        desc = "Entry ID",
                        min = 1,
                        max = 1,
                    }
                }
            }
        },
    };

    command.parse(args);

    if (command.options["help"]?.value != null) {
        command.help();
        return;
    }

    try {
        SQLite sqlite = SQLite.init();
        Journal journal = Journal.init(sqlite, path: command.options["directory"]?.value);

        Command addCommand = command.commands["add"]!;
        if (addCommand.selected) {
            if (Entry.parse(getEntrySource(addCommand) ?? "") -> entry) {
                journal.addEntry(entry);
            } else {
                print("Could not parse entry");
            }

            return;
        }

        Command listCommand = command.commands["list"]!;
        if (listCommand.selected) {
            Filter filter = Filter.parse(listCommand.arguments["filter"]?.value ?? [<str>]);
            filter.before = listCommand.options["before"]?.value;
            filter.after = listCommand.options["after"]?.value;
            filter.at = listCommand.options["at"]?.value;
            if (listCommand.options["limit"]?.value -> limit) {
                filter.limit = parseInt(limit);
            }

            journal.listEntries(
                filter,
                short: listCommand.options["short"]?.value != null
            );

            return;
        }

        Command deleteCommand = command.commands["delete"]!;
        if (deleteCommand.selected) {
            if (parseInt(deleteCommand.arguments["id"]!.value![0]) -> id) {
                journal.deleteEntry(id);
            } else {
                print("Entry ID must be integer");
            }

            return;
        }
    } catch (SQLiteError error) {
        Logger.instance?.error("{error.code} {error.message}", namespace: "SQL");
    } catch (any error) {
        Logger.instance?.error("Something went wrong: {error}");
    }
}